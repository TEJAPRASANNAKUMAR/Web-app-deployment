# Automated web application deployment:
Objective: Automate the deployment of a web application using Jenkins, Docker, and AWS. The pipeline will include stages for building, testing, and deploying the application.

Tools & Technologies:

->Version Control: Git
->CI/CD Tool: Jenkins
->Containerization: Docker
->Cloud Provider: AWS (Amazon Web Services)
->Web Application Framework: Node.js, Python Flask, or similar

Step-by-Step Process
Step 1: Set Up Version Control with Git

1. Create a Git Repository
Git is a version control system that lets you manage and keep track of your source code history. A Git repository is a storage space where your project is stored.

a.Sign Up/Log In:
Go to GitHub (or another Git service like GitLab or Bitbucket).
Sign up for a new account or log in to your existing account.

b. Create a New Repository:
Click on the "New" button to create a new repository.
Name your repository (e.g., web-app-deployment).
Choose between making it public or private.
Optionally add a description.
Initialize the repository with a README.md if desired.
Click "Create repository."

c. Clone the Repository Locally:
Use the following command to clone your repository to your local machine:
"git clone https://github.com/your-username/web-app-deployment.git"

2. Configure Git
Configuring Git involves setting your user details and ensuring your repository tracks the correct files.

a. Set User Name and Email:
Run these commands to set your username and email:
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

b.Create a ".gitignore" File:

In your local repository, create a ".gitignore" file to specify which files should not be tracked by Git.
Common items to ignore include
node_modules/
.env
*.log

c.Check Status and Add Files:
Check the status of your repository:
git status
Add all necessary files:
git add .

d.Commit Changes:
Commit your changes with a descriptive message:
git commit -m "Initial commit with web application setup"

e. Push Changes:
Push your local changes to the remote repository:
git push origin main


Step 2: Develop the Web Application
1. Choose a Framework
Select a web framework that suits your application needs. For demonstration purposes, let's use Node.js with Express.

2. Create Application Files

a. Initialize Node.js Application:
In the root of your project directory, initialize a Node.js application
npm init -y

b.Install Express:
Install Express as a dependency:
npm install express

c.Create Basic Application:
Create an "app.js" file with a basic Express server setup: 
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(port, () => {
  console.log(`App listening at http://localhost:${port}`);
});

d.Add Unit Tests:
Set up unit tests using a testing framework like Jest or Mocha.
For example, with Jest, create a test directory with a "test" file:
test('Basic test', () => {
  expect(1 + 1).toBe(2);
});

e.Test Locally:
Run your application to ensure it works:
node app.js
Execute tests:
npm test

Step 3: Containerize the Application with Docker
1. Install Docker
Ensure Docker is installed and running on your machine. You can download Docker from the Docker website.

2. Create a Dockerfile
A Dockerfile defines the environment and instructions to build a Docker image for your application.

a.Create a "Dockerfile":
In the root directory of your project, create a Dockerfile:
# Use an official Node.js runtime as a parent image
FROM node:14

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy application dependency manifests to the container
COPY package*.json ./

# Install application dependencies
RUN npm install

# Copy the application source code to the container
COPY . .

# Expose the application port
EXPOSE 3000

# Start the application
CMD ["node", "app.js"]

3. Build and Test the Docker Image
a. Build the Docker Image:
Build the Docker image using the command:
docker build -t myapp:latest .

b. Run a Docker Container:
Run a container to test the image:
docker run -p 3000:3000 myapp:latest


Step 4: Set Up Jenkins for CI/CD
1. Install Jenkins
Jenkins can be installed on a local machine or an AWS EC2 instance. Follow these steps for AWS EC2:

a. Launch EC2 Instance:
Choose an Amazon Linux 2 or Ubuntu instance.
Configure security groups to allow HTTP and SSH access.

b. Install Jenkins:
SSH into the instance and install Jenkins:
sudo yum update -y
sudo yum install java-1.8.0-openjdk-devel -y
wget -O /etc/yum.repos.d/jenkins.repo \
  https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
sudo yum install jenkins -y
sudo systemctl start jenkins
sudo systemctl enable jenkins

c. Access Jenkins:
Access Jenkins through your browser using "http://<EC2-Public-IP>:8080"

d.Unlock Jenkins:
Retrieve the initial admin password using
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

2. Configure Jenkins
a. Install Plugins:
Install necessary plugins, such as Docker and Git plugins, from the Jenkins dashboard.

b. Create a New Pipeline Job:
In Jenkins, create a new item and select "Pipeline" as the job type.
Configure the job to pull the repository and use the "Jenkinsfile".

3. Create a Jenkinsfile
A Jenkinsfile is a text file that contains the definition of a Jenkins pipeline.

a.Create a Jenkinsfile:
In your project directory, create a "Jenkinsfile":
pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t myapp:latest .'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run tests
                    sh 'docker run myapp:latest npm test'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy to AWS ECS or EC2
                    sh 'docker tag myapp:latest <AWS_ACCOUNT_ID>.dkr.ecr.<REGION>.amazonaws.com/myapp:latest'
                    sh 'docker push <AWS_ACCOUNT_ID>.dkr.ecr.<REGION>.amazonaws.com/myapp:latest'
                }
            }
        }
    }
}

4. Configure Jenkins Job
a. Set Up the Pipeline Job:
Set the pipeline script to use the Jenkinsfile from your Git repository.
Add credentials and environment variables for AWS access.


Step 5: Deploy to AWS
1. Set Up AWS Environment

a. Create AWS Account:
Sign up for an AWS account if you don't have one.

b. Configure AWS CLI:
Install and configure the AWS CLI on your local machine:
aws configure

2. Create an ECR Repository
a. Create an ECR Repository:
Use the AWS Management Console to create a new ECR repository for your Docker images.
3. Create an ECS Cluster

a. Create an ECS Cluster:
In the AWS Management Console, navigate to ECS and create a new cluster.

b. Define a Task Definition:
Create a task definition using the Docker image from ECR.

c. Configure ECS Service:
Set up an ECS service to run your tasks.

4. Update Jenkins for Deployment

a. Push Docker Image to ECR:
Update the Jenkinsfile to authenticate with ECR and push the image.

b. Deploy to ECS:
Use the AWS CLI or SDK to update the ECS service with the new image version.

5. Verify Deployment

a. Access Application:
Access your deployed application through the ECS service public endpoint.

b. Monitor with CloudWatch:
Use AWS CloudWatch to monitor application logs and metrics.
